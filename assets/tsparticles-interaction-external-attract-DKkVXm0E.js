import{E as k,C as p,g as x,c as g,a as A,V as M,m as b,i as d}from"./tsparticles-engine-DLgpyJd2.js";class E{constructor(){this.distance=200,this.duration=.4,this.easing="ease-out-quad",this.factor=1,this.maxSpeed=50,this.speed=1}load(t){t&&(t.distance!==void 0&&(this.distance=t.distance),t.duration!==void 0&&(this.duration=t.duration),t.easing!==void 0&&(this.easing=t.easing),t.factor!==void 0&&(this.factor=t.factor),t.maxSpeed!==void 0&&(this.maxSpeed=t.maxSpeed),t.speed!==void 0&&(this.speed=t.speed))}}class _ extends k{constructor(t,i){super(i),this._clickAttract=()=>{const a=this.container;a.attract||(a.attract={particles:[]});const{attract:e}=a;if(e.finish||(e.count||(e.count=0),e.count++,e.count===a.particles.count&&(e.finish=!0)),e.clicking){const c=a.interactivity.mouse.clickPosition,s=a.retina.attractModeDistance;if(!s||s<0||!c)return;this._processAttract(c,s,new p(c.x,c.y,s))}else e.clicking===!1&&(e.particles=[])},this._hoverAttract=()=>{const a=this.container,e=a.interactivity.mouse.position,c=a.retina.attractModeDistance;!c||c<0||!e||this._processAttract(e,c,new p(e.x,e.y,c))},this._processAttract=(a,e,c)=>{const s=this.container,n=s.actualOptions.interactivity.modes.attract;if(!n)return;const u=s.particles.quadTree.query(c,l=>this.isEnabled(l));for(const l of u){const{dx:v,dy:m,distance:r}=x(l.position,a),f=n.speed*n.factor,h=g(A(n.easing)(1-r/e)*f,0,n.maxSpeed),y=M.create(r===0?f:v/r*h,r===0?f:m/r*h);l.position.subFrom(y)}},this._engine=t,i.attract||(i.attract={particles:[]}),this.handleClickMode=a=>{const e=this.container.actualOptions,c=e.interactivity.modes.attract;if(!(!c||a!=="attract")){i.attract||(i.attract={particles:[]}),i.attract.clicking=!0,i.attract.count=0;for(const s of i.attract.particles)this.isEnabled(s)&&s.velocity.setTo(s.initialVelocity);i.attract.particles=[],i.attract.finish=!1,setTimeout(()=>{i.destroyed||(i.attract||(i.attract={particles:[]}),i.attract.clicking=!1)},c.duration*1e3)}}}clear(){}init(){const t=this.container,i=t.actualOptions.interactivity.modes.attract;i&&(t.retina.attractModeDistance=i.distance*t.retina.pixelRatio)}async interact(){const t=this.container,i=t.actualOptions,a=t.interactivity.status===b,e=i.interactivity.events,c=e.onHover.enable,s=e.onHover.mode,n=e.onClick.enable,u=e.onClick.mode;a&&c&&d("attract",s)?this._hoverAttract():n&&d("attract",u)&&this._clickAttract()}isEnabled(t){const i=this.container,a=i.actualOptions,e=i.interactivity.mouse,c=((t==null?void 0:t.interactivity)??a.interactivity).events;if((!e.position||!c.onHover.enable)&&(!e.clickPosition||!c.onClick.enable))return!1;const s=c.onHover.mode,n=c.onClick.mode;return d("attract",s)||d("attract",n)}loadModeOptions(t,...i){t.attract||(t.attract=new E);for(const a of i)t.attract.load(a==null?void 0:a.attract)}reset(){}}async function O(o,t=!0){await o.addInteractor("externalAttract",i=>new _(o,i),t)}export{O as l};
